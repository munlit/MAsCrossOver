// ╔═══════════════════════════════════════╗
// ║  @Ultr                                ║
// ║  Multi Crossover Moving Averages      ║
// ║  © LuxAlgo                            ║
// ╚═══════════════════════════════════════╝

//@version=5
indicator("Multi CrossOver Moving Average (@Ultr)", shorttitle = "MC MA (@Ultr.)", overlay = true)

//  ═════════
//  Multi CMA
//  Constants
//  ═════════

// Color
color colorZero = color.new(#e91e63, 55)  // color Amarillo #eedd45
color colorFirs = color.new(#33ffac, 55)  // color Menta	#33ffac
color colorSeco = color.new(#eedd45, 55)  // color Fucxia	#e91e63
color colorThir = color.new(#0034c5, 92)  // color Azul		#0034c5
color colorCuar = color.new(#9598a1, 92)  // color Gris		#9598a1
color colorFift = color.new(#e65100, 65)  // color Naranja	#e65100

color colorBuy  = color.new(#33ffac, 45)
color colorSell = color.new(#e91e63, 45)

// Indicador
int length8   = input(8, title   = "8 Periodos")
int length20  = input(20, title  = "20 Periodos")
int length55  = input(55, title  = "55 Periodos")
int length100 = input(100, title = "100 Periodos")
int length200 = input(200, title = "200 Periodos")

//  ═════════
//  Multi CMA
//  Inputs - Options
//  ════════════════

string optionMa	= input.string("SMA", "Tipo de MM", options = ["EMA", "SMA", "RMA", "WMA", "VWMA"])

//  ═════════
//  Multi CMA
//  Functions
//  ══════

ma(source, length, type) =>
    type == "SMA" ? ta.sma(source, length) :    // Media Movil Simple
     type == "EMA" ? ta.ema(source, length) :   // Media Movil Exponencial
     type == "RMA" ? ta.rma(source, length) :   // Media Movil
     type == "WMA" ? ta.wma(source, length) :   // Media Movil Ponderada
     type == "VWMA" ? ta.vwma(source, length) : // Media Movil Ponderada por volumen
     na

//  ═════════
//  Multi CMA
//  Display
//  ═══════

ma8 = ma(close, length8, optionMa)
// plot(ma8, "MA 8", colorZero, linewidth = 1)
maPlot8 = plot(ma8, "MA 8", color = na)

ma20 = ma(close, length20, optionMa)
// plot(ma20, "MA 20", colorFirs, linewidth = 1)
maPlot20 = plot(ma20, "MA 20", color = na)

ma55 = ma(close, length55, optionMa)
plot(ma55, "MA 55", colorSeco, linewidth = 1)

ma100 = ma(close, length100, optionMa)
plot(ma100, "MA 100", colorThir, linewidth = 2)

ma200 = ma(close, length200, optionMa)
plot(ma200, "MA 200", colorCuar, linewidth = 1, style = plot.style_area)

//  ═════════
//  Multi CMA
//  CrossOver
//  ═════════

// CrossOver ghost
color maCrossOver = ma8 > ma20 ? colorBuy : colorSell
fill(maPlot8, maPlot20, maCrossOver, "CrossOver")

// CrossOver Line
bool maRising  = ta.rising(ma20, 1)

color crossMa = maRising ? colorBuy : colorSell
plot(ma20, "Operativa", crossMa, 4)


//  ══════════════════

color maInput = input.color(color.purple, "MA")
color closeInput = input.color(color.blue, "Close")
float ma = ta.sma(close, 20)
float maHeight = ta.percentrank(ma, 100)
float transparency = math.min(80, 100 - maHeight)
// This plot uses a calculated color.
plot(ma, "MA1", color.new(maInput, transparency), 2)
// This plot does not use a calculated color.
plot(close, "Close", closeInput)




//@version=5
indicator("Example 3", overlay = true)

//@variable The 5-bar moving average of `close` prices.
float ma1 = ta.sma(close, 5)
//@variable The 20-bar moving average of `close` prices.
float ma2 = ta.sma(close, 20)

//@variable The 90% transparent color of the space between MA plots. Green if `ma1 > ma2`, red otherwise.
color fillColor = ma1 > ma2 ? color.new(color.green, 90) : color.new(color.red, 90)

//@variable The ID of the `ma1` plot for use in the `fill()` function.
ma1PlotID = plot(ma1, "5-bar SMA")
//@variable The ID of the `ma2` plot for use in the `fill()` function.
ma2PlotID = plot(ma2, "20-bar SMA")

// Fill the space between the `ma1PlotID` and `ma2PlotID` using the `fillColor`.
fill(ma1PlotID, ma2PlotID, fillColor, "SMA plot fill")


//@version=5
indicator("Conditional colors", "", true)
int   lengthInput = input.int(20, "Length", minval = 2)
color maBullColorInput = input.color(color.green, "Bull")
color maBearColorInput = input.color(color.maroon, "Bear")
float ma = ta.sma(close, lengthInput)
// Define our states.
bool maRising  = ta.rising(ma, 1)
// Build our color.
color c_ma = maRising ? maBullColorInput : maBearColorInput
plot(ma, "MA", c_ma, 2)



//@version=5
indicator("Moving Average Cross", shorttitle="MA Cross", overlay=true, timeframe="", timeframe_gaps=true)

ma(source, length, type) =>
    type == "SMA" ? ta.sma(source, length) :
     type == "EMA" ? ta.ema(source, length) :
     type == "SMMA (RMA)" ? ta.rma(source, length) :
     type == "WMA" ? ta.wma(source, length) :
     type == "VWMA" ? ta.vwma(source, length) :
     na

show_ma1   = input(true   , "MA №1", inline="MA #1")
ma1_type   = input.string("SMA"  , ""     , inline="MA #1", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma1_source = input(close  , ""     , inline="MA #1")
ma1_length = input.int(20     , ""     , inline="MA #1", minval=1)
ma1_color  = input(#f6c309, ""     , inline="MA #1")
ma1 = ma(ma1_source, ma1_length, ma1_type)
plot(show_ma1 ? ma1 : na, color = ma1_color, title="MA №1")

show_ma2   = input(true   , "MA №2", inline="MA #2")
ma2_type   = input.string("SMA"  , ""     , inline="MA #2", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
ma2_source = input(close  , ""     , inline="MA #2")
ma2_length = input.int(50     , ""     , inline="MA #2", minval=1)
ma2_color  = input(#fb9800, ""     , inline="MA #2")
ma2 = ma(ma2_source, ma2_length, ma2_type)
plot(show_ma2 ? ma2 : na, color = ma2_color, title="MA №2")

longCond = ta.crossover(ma1 > ma2)
shortCond = ta.crossunder(ma1 < ma2)

plotshape(series=longCond, title="Long", style=shape.triangleup, location=location.belowbar, color.green, text="LONG", size=size.normal)
plotshape(series=shortCond, title="Short", style=shape.triangledown, location=location.abovebar, color.red, text="SHORT", size=size.normal)