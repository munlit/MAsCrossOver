// ╔═══════════════════════════════════════╗
// ║  @Ultr                                ║
// ║  Multi Crossover Moving Averages      ║
// ║  © LuxAlgo                            ║
// ╚═══════════════════════════════════════╝

//@version=5
indicator("Multi CrossOver Moving Average (@Ultr)", shorttitle = "MC MA (@Ultr.)", overlay = true)

//  ═════════
//  Multi CMA
//  Constants
//  ═════════

// Color
color colorZero = color.new(#e91e63, 55)  // color Amarillo #eedd45
color colorFirs = color.new(#33ffac, 55)  // color Menta	#33ffac
color colorSeco = color.new(#eedd45, 55)  // color Fucxia	#e91e63
color colorThir = color.new(#0034c5, 92)  // color Azul		#0034c5
color colorCuar = color.new(#9598a1, 92)  // color Gris		#9598a1
color colorFift = color.new(#e65100, 65)  // color Naranja	#e65100

color colorBuy  = color.new(#33ffac, 45)
color colorSell = color.new(#e91e63, 45)

// Indicador
int length8   = input(8, title   = "8 Periodos")
int length20  = input(20, title  = "20 Periodos")
int length55  = input(55, title  = "55 Periodos")
int length100 = input(100, title = "100 Periodos")
int length200 = input(200, title = "200 Periodos")

//  ═════════
//  Multi CMA
//  Inputs - Options
//  ════════════════

string optionMa	= input.string("SMA", "Tipo de MM", options = ["EMA", "SMA", "RMA", "WMA", "VWMA"])

//  ═════════
//  Multi CMA
//  Functions
//  ══════

ma(source, length, type) =>
    type == "SMA" ? ta.sma(source, length) :    // Media Movil Simple
     type == "EMA" ? ta.ema(source, length) :   // Media Movil Exponencial
     type == "RMA" ? ta.rma(source, length) :   // Media Movil
     type == "WMA" ? ta.wma(source, length) :   // Media Movil Ponderada
     type == "VWMA" ? ta.vwma(source, length) : // Media Movil Ponderada por volumen
     na

//  ═════════
//  Multi CMA
//  Display
//  ═══════

ma8 = ma(close, length8, optionMa)
// plot(ma8, "MA 8", colorZero, linewidth = 1)
maPlot8 = plot(ma8, "MA 8", color = na)

ma20 = ma(close, length20, optionMa)
// plot(ma20, "MA 20", colorFirs, linewidth = 1)
maPlot20 = plot(ma20, "MA 20", color = na)

ma55 = ma(close, length55, optionMa)
plot(ma55, "MA 55", colorSeco, linewidth = 1)

ma100 = ma(close, length100, optionMa)
plot(ma100, "MA 100", colorThir, linewidth = 2)

ma200 = ma(close, length200, optionMa)
plot(ma200, "MA 200", colorCuar, linewidth = 1, style = plot.style_area)

//  ═════════
//  Multi CMA
//  CrossOver
//  ═════════

// CrossOver ghost
color maCrossOver = ma8 > ma20 ? colorBuy : colorSell
fill(maPlot8, maPlot20, maCrossOver, "CrossOver")

// CrossOver Line
bool maRising  = ta.rising(ma20, 1)

color crossMa = maRising ? colorBuy : colorSell
plot(ma20, "Operativa", crossMa, 4)


//  ══════════════════

float maHeight = ta.percentrank(ma20, 100)
float transparency = math.min(80, 100 - maHeight)
// This plot uses a calculated color.
plot(ma, "MA1", color.new(colorThir, transparency), 2)
// This plot does not use a calculated color.
plot(close, "Close", colorCuar)

buyCond = ta.crossover(ma8 > ma20)
sellCond = ta.crossunder(ma8 < ma20)

plotshape(series = buyCond, title = "Long", style = shape.triangleup, location = location.belowbar, colorBuy, text = "Buy", size = size.tiny)
plotshape(series = sellCond, title = "Short", style = shape.triangledown, location = location.abovebar, colorSell, text = "Sell", size = size.tiny)